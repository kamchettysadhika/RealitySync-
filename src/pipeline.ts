import { writeFileSync } from 'fs';
import path from 'path';
import { aggregateEventCounts } from './forecastinput';
import { generateForecast } from './LLM_Forecast';
import { parseAndAct } from './executeresponse';
import { exportMetrics } from './slack/monitor';
import { detectAnomalies } from '../rules/anomalyEngine';

async function mainPipeline() {
  const buckets = await aggregateEventCounts();

  const timeSeries = Array.from(buckets.entries()).map(([key, count]) => {
    const [time, location] = key.split('|');
    return { time, location, count };
  });

  const outPath = path.join(__dirname, 'forecast', 'timeseries.json');
  writeFileSync(outPath, JSON.stringify(timeSeries, null, 2));
  console.log('✅ Time series written.');

  await generateForecast();
  console.log('✅ Forecast generated by LLM.');

  await parseAndAct();
  console.log('✅ LLM response parsed and actions triggered.');
}



await detectAnomalies();
await exportMetrics(); // <- Adds live snapshot of mission data

mainPipeline();
